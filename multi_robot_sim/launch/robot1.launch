<launch>
    <param name="/use_sim_time" value="true"/>
    <arg name="iface" default="ens1f0" />
    <arg name="port" default="9196" />
    <arg name="init_x" default="-3.0"/> <!--0.83-->
    <arg name="init_y" default="-3.0"/> <!--n1.03-->
    <arg name="init_z" default="1.0"/>
    <arg name="neighbor_map" default="/neighbor_map"/>
    <arg name="map_update" default="/map_update"/>
    <arg name = "global_map_topic" default="/map" />

    
    <node pkg="multi_master_bridge" type="portal" respawn="false" name="portal" launch-prefix="" output="screen" /> 

    <node pkg="multi_master_bridge" type="beacon" respawn="false" name="beacon" output="screen"> 
        <param name="broadcast_to" value="$(arg port)"/>
        <param name="broadcast_interface" value="$(arg iface)"/>
        <param name="refresh_rate" value="1"/>
    </node>
  
    <node pkg="multi_master_bridge" type="robot_discover" respawn="false" name="robot_discover" output="screen"> 
        <param name="listen_to" value="$(arg port)"/>
         <param name="robot_decay_time_s" value="5"/>
        <param name="listen_interface" value="$(arg iface)"/>
    </node>

    <!-- GREEDY MERGING -->
    <node pkg="multi_merge" type="greedy_merging" respawn="false" name="greedy_merging" output="screen" launch-prefix="">
        <param name="other_map" value="$(arg neighbor_map)"/>
        <param name="my_map" value="/local_map"/>
        <param name="merged_map_topic" value="$(arg global_map_topic)"/>
        <param name="init_x" value="$(arg init_x)"/>
        <param name="init_y" value="$(arg init_y)"/>
        <param name="init_z" value="$(arg init_z)"/>
        <param name="map_update_topic" value="$(arg map_update)"/>
        <param name="furious_merge" value="false"/>
        <param name="map_resolution" value="0.05"/>
        <param name="merged_map_dilation" value="7.0"/>
        
    </node>

    <node pkg="multi_master_bridge" type="map_feeding" respawn="false" name="map_exchange" launch-prefix="">
     <!-- gdb -ex run ~~args -->
        <param name="publish_to" value="$(arg neighbor_map)"/>
        <param name="network_interface" value="$(arg iface)"/>
        <param name="map_update_topic" value="$(arg map_update)"/>
        <param name="sending_rate" value="0.2" />
    </node>
<!--Robot startup-->


  <param name="robot_description" command="cat $(find gazebo_sim)/launch/includes/turtlebot.urdf"/>

  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find gazebo_sim)/launch/includes/turtlebot.urdf -urdf -x $(arg init_x) -y $(arg init_y) -z $(arg init_z) -model turtlebot" />
  
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

   <!--node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0.0 0 0.0 0 0 0 1 base_link gyro_link 100" /-->

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find gazebo_sim)/launch/includes/worlds/$(arg world).world"/> <!-- worlds/willowgarage.world Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/> <!-- Inert - see gazebo_ros_pkgs issue #491 -->
    <arg name="recording" value="false"/>
    <arg name="debug" value="false"/>
  </include>

   <node pkg="slam_karto" type="slam_karto" name="slam_karto" output="screen">
    <!--remap from="scan" to="base_scan"/-->
    <param name="odom_frame" value="odom"/>
    <param name="map_update_interval" value="2"/>
    <param name="resolution" value="0.05"/>
    <remap from="/map" to="/local_map" />
    <rosparam command="load" file="$(find slam_karto)/config/mapper_params.yaml" />
  </node>
  

  <include file="$(find gazebo_sim)/launch/includes/move_base.launch.xml" />
  
  <node pkg="costmap_2d" type="costmap_2d_node" name="costmap_for_exploration_global" respawn="true" >
    
    <rosparam ns="costmap" subst_value="true">
      global_frame: /map
      robot_base_frame: /base_link
      update_frequency: 1.0
      publish_frequency: 1.0
      rolling_window: false
      always_send_full_costmap: true
      # Map management parameters
      unknown_cost_value: 255
      
      robot_radius: 0.3
      plugins: 
        - {name: static, type: "costmap_2d::StaticLayer"}
        - {name: inflation,        type: "costmap_2d::InflationLayer"}  
      static:
        #Can pull data from gmapping, map_server or a non-rolling costmap            
        map_topic: /map
        subscribe_to_updates: true 
      inflation:
        inflation_radius: 0.5

    </rosparam>
  </node>
  

  <node pkg="frontier_allocation" type="frontier_detection" name="frontier_detection" output="screen">
      <param name="map" value="/costmap_for_exploration_global/costmap/costmap"/>
      <param name="min_frontier_size_px" value="10"/>
    </node>

    <node pkg="frontier_allocation" type="frontier_allocation" name="frontier_allocation" output="screen">
      <param name="goal_tolerance" value="0.5"/>
      <param name="frontier_tolerance" value="0.05"/>
      <param name="random_frontier" value="false"/>
      <param name="cmd_vel_topic" value="/mobile_base/commands/velocity"/>
    </node>

     <node name="rviz" pkg="rviz" type="rviz" args="-d $(find adaptive_local_planner)/rviz/robot_navigation.rviz"/>
</launch>

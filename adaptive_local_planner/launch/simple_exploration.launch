<launch>

    <param name="urg_node/frame_id" value="plate_top_link" />
    <include file="$(find turtlebot_bringup)/launch/minimal.launch" />

  <include file="$(find adaptive_local_planner)/launch/includes/move_base.launch.xml" />

<node name="urg_node" pkg="urg_node" type="urg_node" >
   <param name="angle_min" value="-1.6"/>
    <param name="angle_max" value="1.6"/>
  </node>

  <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0.110 0 0.02478 0 0 0 1 base_link laser 50" />
  
<node name="cartographer_node" pkg="cartographer_ros"
      type="cartographer_node" args="
          -configuration_directory
              $(find adaptive_local_planner)/launch/
          -configuration_basename turtlebot_urg_lidar_2d.lua"
      output="screen">
    <!--remap from="scan" to="/laser_scan" /-->
  </node>

  <node name="flat_world_imu_node" pkg="cartographer_turtlebot"
      type="cartographer_flat_world_imu_node" output="screen">
    <remap from="imu_in" to="/mobile_base/sensors/imu_data_raw" />
    <remap from="imu_out" to="/imu" />
  </node>

  <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
      type="cartographer_occupancy_grid_node" args="-resolution 0.05" >
      <remap from="/map" to="/pmap" />
	</node>

 
 
  <node pkg="multi_merge" type="map_threshold" respawn="false" name="map_threshold" output="screen" launch-prefix="">
        <param name="th_value" value="60"/>
        <param name="map_in_topic" value="/pmap"/>
        <param name="map_out_topic" value="/map"/>
  </node>

   <node pkg="pose_publisher" type="pose_publisher" name="pose_publisher" output="screen">
        <param name="map_frame" value="/map" />
         <param name="base_frame" value="/base_link" />
        <param name="pose_topic_name" value="/posegmapping" />
        <param name="publish_frequency" value="10.0" />
  </node>

  <!--used to compute frontiers by   rosrun phrontier_exploration headless phrontier_explorationpackage_extract_frontiers -->
  <node pkg="costmap_2d" type="costmap_2d_node" name="costmap_for_exploration_global">
    
    <rosparam ns="costmap" subst_value="true">
      global_frame: /map
      robot_base_frame: /base_link
      update_frequency: 0.5
      publish_frequency: 0.5
      rolling_window: false
      always_send_full_costmap: true

      # Map management parameters
      unknown_cost_value: 255
      
      robot_radius: 0.3
      plugins: 
        - {name: static, type: "costmap_2d::StaticLayer"}
        - {name: inflation,        type: "costmap_2d::InflationLayer"}  
      static:
        #Can pull data from gmapping, map_server or a non-rolling costmap            
        map_topic: /map
        subscribe_to_updates: true 
      inflation:
        inflation_radius: 0.3

    </rosparam>
  </node>
  
  <node pkg="frontier_allocation" type="frontier_detection" name="frontier_detection" output="screen">
      <param name="map" value="/costmap_for_exploration_global/costmap/costmap"/>
      <param name="min_frontier_size_px" value="10"/>
    </node>

    <node pkg="frontier_allocation" type="frontier_allocation" name="frontier_allocation" output="screen">
      <param name="goal_tolerance" value="0.5"/>
      <param name="frontier_tolerance" value="0.05"/>
      <param name="random_frontier" value="false"/>
      <param name="cmd_vel_topic" value="/mobile_base/commands/velocity"/>
    </node>    
  
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find adaptive_local_planner)/rviz/robot_navigation.rviz"/>
  <!--node name="rst_tracking" pkg="gazebo_sim" type="rsload.sh" args="cartographer_node" respawn="true" /-->
</launch>
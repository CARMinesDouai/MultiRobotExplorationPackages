<launch>
  <arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <!-- Name of the map to use (without path nor extension) and initial position -->
  <arg name="map_file"       default="$(find adaptive_local_planner)/sim/map.yaml"/> <!-- robopark_plan -->
  <arg name="world_file"     default="$(find adaptive_local_planner)/sim/map.world"/>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
   <arg name="configuration_basename" value="turtlebot_urg_sim.lua" />
  <param name="/use_sim_time" value="true"/>
  <!--  ******************** Stage ********************  -->
  <!-- 
        Publishes transforms:
          /base_link -> /base_laser
          /base_footprint -> /base_link (identity)
          /odom -> base_footprint
        Publishes topics:
          /odom : odometry data from the simulated odometry
          /base_scan : laser data from the simulated laser
          /base_pose_ground_truth : the ground truth pose
        Parameters:
          base_watchdog_timeout : time (s) after receiving the last command on cmd_vel before stopping the robot
        Args:
          -g : run in headless mode.
  --> 
   <!--node pkg="tf" type="static_transform_publisher" name="laser_in_base_link"
    args="0.03 0.0 0.0 0.0 0.0 0.0 /base_link /laser 80" /-->

  <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
    <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="odom" to="odom"/>
    <remap from="base_pose_ground_truth" to="base_pose_ground_truth"/>
    <remap from="cmd_vel" to="mobile_base/commands/velocity"/>
    <remap from="base_scan" to="scan"/>
  </node>

  <!--  ***************** Robot Model *****************  -->
  <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="true"/>
  </node>

  <!-- Command Velocity multiplexer -->
  <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml"/>
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>


  <!--  ****** Maps *****  -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    <param name="frame_id" value="/map"/>
  </node>

  

  <include file="$(find turtlebot_navigation)/launch/includes/amcl/amcl.launch.xml">
    <arg name="scan_topic" value="scan"/>
    <arg name="use_map_topic" value="true"/>
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>

   <!--node pkg="pose_publisher" type="pose_publisher" name="pose_publisher" output="screen">
        <param name="map_frame" value="/map" />
         <param name="base_frame" value="/base_link" />
        <param name="pose_topic_name" value="/posegmapping" />
        <param name="publish_frequency" value="10.0" />

  </node-->


  <!--  **************** Visualisation ****************  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find adaptive_local_planner)/rviz/robot_navigation.rviz"/>


<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
   <rosparam file="$(find adaptive_local_planner)/launch/includes/costmap_common_params.yaml" command="load" ns="global_costmap"/> 
    <rosparam file="$(find adaptive_local_planner)/launch/includes/global_costmap_params.yaml" command="load" />

    <rosparam file="$(find adaptive_local_planner)/launch/includes/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find adaptive_local_planner)/launch/includes/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find adaptive_local_planner)/launch/includes/global_planner_params.yaml" command="load" />

    <rosparam file="$(find inria_demo)/launch/include/move_base_params.yaml" command="load" />
    <rosparam file="$(find inria_demo)/launch/include/teb_local_planner.yaml" command="load" />
  </node>
 <!--include file="$(find adaptive_local_planner)/launch/includes/move_base.launch.xml">
  </include-->
</launch>